from gmpy2 import mpz
import gmpy2
p=mpz(143171256907159093417665805789306626095477949526180338341037170457778630708359449299599161399280327025017632462091255348225188931378116551387913111635575202503118400493779553514461925840154812656972438157681917026006628078362907521987632334787346072901600588194568796082229671233858716526489864498341130275723)
print gmpy2.is_prime(p)
q=p+2**15*gmpy2.isqrt(p)
while not gmpy2.is_prime(q):
	q-=2

#N=p*q
N=mpz("20498008804375750415794712776575518342751729288894304415930126337458923102176449528807949174535008623198994919591420916647527654703341068898874674832490495309922966939740877756654586280040508946648502510430372651642752163489916301113755012027247991967194352196443321691844678771189153472193876978728695993592404389009868920720625312271492838191978454361053456418792138048263881110728561858484516833109524539797404970497429131898428785038335537855205711113468923160639736130795271848154264663158260195815231967888814613886011945375175849506772811442470842868977844124990541281509833617824295246154408696285807702158073")
print N==p*q
e=65537
#d=gmpy2.invert(e, N-(p+q-1))

def encrypt(data):
	data=data.encode("hex")
	data=mpz(data, 16)
	return gmpy2.powmod(data, e, N)

def decrypt(data):
	data = gmpy2.powmod(data, d, N)
	data = hex(data)[2:]
	return data.decode("hex")

import base64
from Crypto import Random
from os import popen
from sys import argv
#for i in range(int(argv[1])):
#	rnd = base64.b64encode(Random.new().read(16))
#	rnd=popen("echo -n %s | md5sum"%rnd).read().split(' ')[0]
#	print rnd, encrypt(rnd)

A=gmpy2.isqrt(N)
while A*A<N:
	A+=1

x=gmpy2.isqrt(A*A-N)
while (A-x)*(A+x)!=N or not gmpy2.is_prime(A-x) or not gmpy2.is_prime(A+x):
	A+=1
	x=gmpy2.isqrt(A*A-N)


